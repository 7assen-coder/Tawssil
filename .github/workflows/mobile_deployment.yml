name: Mobile Deployment

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version de l'application (ex: 1.0.0)"
        required: true
      release_notes:
        description: 'Notes de version'
        required: true
      rollout_percentage:
        description: 'Pourcentage de déploiement (1-100)'
        required: true
        default: '10'
      deploy_channel:
        description: 'Canal de déploiement'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - beta
          - alpha

jobs:
  validate_version:
    name: Validate Version Format
    runs-on: ubuntu-latest
    steps:
      - name: Check version format
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Format de version invalide. Utilisez le format x.y.z (ex: 1.0.0)"
            exit 1
          fi
          echo "Version validée: ${{ github.event.inputs.version }}"
      
      - name: Check rollout percentage
        run: |
          if ! [[ ${{ github.event.inputs.rollout_percentage }} =~ ^[0-9]+$ ]] || \
             [ ${{ github.event.inputs.rollout_percentage }} -lt 1 ] || \
             [ ${{ github.event.inputs.rollout_percentage }} -gt 100 ]; then
            echo "Pourcentage de déploiement invalide. Utilisez un nombre entre 1 et 100."
            exit 1
          fi
          echo "Pourcentage validé: ${{ github.event.inputs.rollout_percentage }}%"

  prepare_release:
    name: Prepare Release
    needs: validate_version
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tawssil_frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Update version in pubspec.yaml
        run: |
          sed -i "s/^version: .*/version: ${{ github.event.inputs.version }}/" pubspec.yaml
      
      - name: Create Release Notes File
        run: |
          mkdir -p fastlane/metadata/android/fr-FR/changelogs
          mkdir -p fastlane/metadata/en-US/release_notes
          
          echo "${{ github.event.inputs.release_notes }}" > fastlane/metadata/android/fr-FR/changelogs/default.txt
          echo "${{ github.event.inputs.release_notes }}" > fastlane/metadata/en-US/release_notes/default.txt
      
      - name: Upload updated files
        uses: actions/upload-artifact@v4
        with:
          name: release-files
          path: |
            tawssil_frontend/pubspec.yaml
            tawssil_frontend/fastlane/

  build_android:
    name: Build Android Release
    needs: prepare_release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tawssil_frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Download release files
        uses: actions/download-artifact@v4
        with:
          name: release-files
          path: .
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      # Génération des fichiers de traduction
      - name: Generate l10n files
        run: |
          if [ -d "lib/translations" ]; then
            flutter pub run easy_localization:generate -S assets/translations -f keys -o locale_keys.g.dart
            flutter pub run easy_localization:generate -S assets/translations -f json -o codegen_loader.g.dart
          fi
        continue-on-error: true
      
      - name: Setup Android keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=keystore.jks
          EOF
      
      - name: Build Android App Bundle
        run: flutter build appbundle --release
      
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: tawssil_frontend/android
      
      - name: Install Fastlane
        run: |
          cd android
          gem install fastlane
      
      - name: Create Fastlane files
        run: |
          mkdir -p android/fastlane
          
          cat > android/fastlane/Fastfile << 'EOF'
          default_platform(:android)
          
          platform :android do
            desc "Deploy to Play Store"
            lane :deploy do |options|
              upload_to_play_store(
                track: options[:deploy_channel],
                release_status: "completed",
                aab: "../build/app/outputs/bundle/release/app-release.aab",
                rollout: options[:rollout_percentage].to_i / 100.0,
                skip_upload_metadata: false,
                skip_upload_images: true,
                skip_upload_screenshots: true,
                json_key_data: ENV['PLAY_STORE_JSON_KEY']
              )
            end
          end
          EOF
      
      - name: Deploy to Play Store
        env:
          PLAY_STORE_JSON_KEY: ${{ secrets.PLAY_STORE_JSON_KEY }}
        run: |
          cd android
          bundle install
          bundle exec fastlane deploy deploy_channel:${{ github.event.inputs.deploy_channel }} rollout_percentage:${{ github.event.inputs.rollout_percentage }}
        continue-on-error: true
      
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: tawssil_frontend/build/app/outputs/bundle/release/app-release.aab

  build_ios:
    name: Build iOS Release
    needs: prepare_release
    runs-on: macos-latest
    defaults:
      run:
        working-directory: tawssil_frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Download release files
        uses: actions/download-artifact@v4
        with:
          name: release-files
          path: .
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      # Génération des fichiers de traduction
      - name: Generate l10n files
        run: |
          if [ -d "lib/translations" ]; then
            flutter pub run easy_localization:generate -S assets/translations -f keys -o locale_keys.g.dart
            flutter pub run easy_localization:generate -S assets/translations -f json -o codegen_loader.g.dart
          fi
        continue-on-error: true
      
      - name: Setup iOS certificates
        run: |
          mkdir -p ios/certs
          echo "${{ secrets.CERTIFICATE_P12 }}" | base64 --decode > ios/certs/certificate.p12
          echo "${{ secrets.PROVISIONING_PROFILE }}" | base64 --decode > ios/certs/profile.mobileprovision
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          cp ios/certs/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
      
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: tawssil_frontend/ios
      
      - name: Install Fastlane
        run: |
          cd ios
          gem install fastlane
      
      - name: Create Fastlane files
        run: |
          mkdir -p ios/fastlane
          
          cat > ios/fastlane/Fastfile << 'EOF'
          default_platform(:ios)
          
          platform :ios do
            desc "Build and deploy to App Store"
            lane :release do |options|
              update_code_signing_settings(
                use_automatic_signing: false,
                team_id: ENV['APPLE_TEAM_ID'],
                code_sign_identity: "iPhone Distribution",
                profile_name: "Tawssil Distribution Profile"
              )
              
              build_app(
                workspace: "Runner.xcworkspace",
                scheme: "Runner",
                export_method: "app-store",
                export_options: {
                  provisioningProfiles: { 
                    "com.tawssil.app" => "Tawssil Distribution Profile"
                  }
                }
              )
              
              upload_to_app_store(
                api_key_path: ENV['APPSTORE_API_KEY_JSON'],
                submit_for_review: false,
                automatic_release: false,
                phased_release: true,
                skip_metadata: false,
                skip_screenshots: true,
                precheck_include_in_app_purchases: false
              )
            end
          end
          EOF
      
      - name: Build and deploy to App Store
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPSTORE_API_KEY_JSON: ${{ secrets.APPSTORE_API_KEY_JSON }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          cd ios
          bundle install
          bundle exec fastlane release
        continue-on-error: true
      
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-release
          path: tawssil_frontend/ios/Runner.ipa

  create_github_release:
    name: Create GitHub Release
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Android Release
        uses: actions/download-artifact@v4
        with:
          name: android-release
          path: releases/android
      
      - name: Download iOS Release
        uses: actions/download-artifact@v4
        with:
          name: ios-release
          path: releases/ios
        continue-on-error: true
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Version ${{ github.event.inputs.version }}
          body: ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: ${{ github.event.inputs.deploy_channel != 'production' }}
          files: |
            releases/android/app-release.aab
            releases/ios/Runner.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}